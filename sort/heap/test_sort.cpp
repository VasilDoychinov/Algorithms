#include <iostream>
#include <vector>

#include <random>

#include "Logger_decl.hpp"
#include "Logger_helpers.hpp"


#include "src/heap_sort.hpp"

int main()
{
    std::vector<int>   v0 {} ;
    std::vector<int>   v1 {1} ;
    std::vector<int>   v2 {1, 2} ;
    std::vector<int>   v3 {1, 2, 3} ;
    std::vector<int>   vn {7, 1, 2, 3, 5, 4, 5, 6, 7} ;

    sortHeap(v0) ; std::cout << "\n> {} -> " << v0 ;
    sortHeap(v1) ; std::cout << "\n> {1} -> " << v1 ;
    sortHeap(v2) ; std::cout << "\n> {1, 2} -> " << v2 ;
    sortHeap(v3) ; std::cout << "\n> {1, 2, 3} -> " << v3 ;
    sortHeap(vn) ; std::cout << "\n> {1, 2, 3, ...} -> " << vn ;

    {
        size_t  size_collection = 1000000 ;
        std::cout << "\n\n> test with " << size_collection << " random numbers\n" ;

        std::random_device              rd ;           // a seed source for the random number engine
        std::mt19937                    gen(rd()) ;    // mersenne_twister_engine seeded with rd()
        std::uniform_int_distribution<> distrib(1, size_collection);

        std::vector<size_t>   test_coll ;
        // Use distrib to transform the random unsigned int generated by gen into an int in [1, size]
        for (size_t  n = 0 ; n != size_collection ; ++n) test_coll.push_back(distrib(gen)) ;

        Log_to(0, ": collection of size ", test_coll.size(), " being sorted") ;
        // Log_to(0, "...", LOG_TIME_LAPSE(Log_start())) ;
        sortHeap(test_coll) ;
        Log_to(0, ": completed ", LOG_TIME_LAPSE(Log_start())) ;
        std::cout << ": checking the result -> " ;
        bool   fl = true ;
        for (size_t i = 0 ; i < test_coll.size() - 1 ; ++i)  {
            if (test_coll[i] > test_coll[i + 1]) {
                fl = false ;
                std::cerr << "\n> data mismatch between " << i << "(" << test_coll[i] << ") and "
                          << (i + 1) << "(" << test_coll[i + 1] << ")" ;
                break ;
            }
        }
        std::cout << (fl ? " OK" : " ERROR") << '\n' ;
        Log_to(0, ": completed ", LOG_TIME_LAPSE(Log_start())) ;
    }

    std::cout << "\n\n> That's it...\n" ;
    return 0;
}
